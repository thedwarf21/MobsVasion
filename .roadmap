L'implémentation de base est fonctionnelle.

Maintenant que mon prototype est prêt, je vais assainir un peu le code avant d'avancer davantage.

Je compléterai au fur et à mesure que j'identifierai les points à améliorer.


Légende :
*   Thématique
_   Tâche/sous-tâche à accomplir
X   Tâche en cours
x   Sous-tâche en cours
V   Tâche terminée
>   Sous-tâche terminée


*   Uniformiser la gestion des popups
    V   Créer la classe TutorialPopup héritant de AbstractPopup
        >   Créer un template HTML dédié
        >   Créer la classe avec la gestion de la navigation par manette, pour les deux boutons "Continuer" et "Passer..."
        >  Passer par popups_stack, pour ouvrir et fermer la popup
    V   Créer une classe MonsterTutoPopup héritant de AbstractPopup
        >   Ajouter le nav-ident du bouton de fermeture
        >   Créer la classe
        >   Passer par popups_stack, pour ouvrir et fermer la popup
    V   Gérer la WaveReportPopup dans popups_stack
        >   Ajouter le nav-ident du bouton de fermeture
        >   Modifier le code de la classe (héritage AbstractPopup)
        >   Passer par popups_stack, pour ouvrir et fermer la popup
    V   Modifier le comportement de togglePause => la fenêtre de paramètres doit aussi pouvoir être ouverte pendant le tuto
        >   Nettoyer la référence MainController.tuto_popup quand la popup se ferme (pour détecter un tuto en cours)
        >   Modifier la condition d'ouverture des paramètres
    >   Faire passer GamepadConfigUI en AbstractPopup
        >   Créer un fichier dédié pour la classe (renommée en GamepadConfigPopup)
        >   Modifier l'implémentation pour AbstractPopup et inclure la navigation par manette
        >   Faire appel à GamepadConfigPopup via PopupsStack, pour ouvrir l'UI de config
        >   Modifier l'ordre des actions, pour encourager l'utilisateur à paramétrer la navigation par manette en premier lieu
        >   Supprimer la classe GamepadConfigUI, devenue inutile, dans rs_game_engine.js
        >   Faire en sorte que le bouton "Valider" soit ignoré lors de la lecture du bouton en cours de configuration (#captureButtonPressed de GamepadConfigPopup)
    _   Supprimer `MainUI.closeAllpopups` et remplacer son appel dans `MainConttroller`, par un appel à `MainConttroller.popups_stack.closeAll()`
        _   Référence this.#gamepad_controls_ui devenue inutile dans MainUI

*   Revenir à des MobileGameElements en tant qu'éléments de DOM (ça permettrait de simplifier grandement le code)
    _   Modifier MobileGameElements
        _   Plus de root_element, puisque ce sera this
        _   L'implémenter comme customElement avec constructeur vide, et méthode init recevant les paramètres
        _   Ajouter un méthode statique 'getInstance' qui crée une instance via createElement, avant d'appeller la méthode init de l'objet, pour ensuite le retourner
    _   Modifier les classes héritantes en conséquence
        _   Surcharger init au lieu de surcharger le constructeur
        _   Plus de root_element
    _   Passer d'une gestion par liste d'objets, à des parcours de résultats de querySelector, et du référencement direct (plus de splice)
        _   Dans la MainUI => plus de liste mais des getters abstrayant les querySelector
        _   Dans la MainUI => Parcours des listes par for/of pour augmenter la lisibilité
        _   Plus de passation d'indice pour gérer les blessures des monstres
 

------------ IDEES POUR LES VERSIONS SUIVANTES ------------
_   Bouclier d'énergie (absorbe les dégâts de projectiles, puis revient à son niveau max au bout d'un certain temps)
    _   Amélioration du temps de récup du bouclier d'énergie (disponible seulement quand si bouclier d'énergie obtenu)
    _   Amélioration de la capacité d'absorbtion du bouclier (disponible seulement quand si bouclier d'énergie obtenu)
_   Lance-grenade intégré
    _   Amélioration du temps de rechargement
    _   Amélioration des dégats de grenades
    _   Amélioration du rayon d'explosion des grenades
_   Réajuster l'argent et l'XP obtenus par kill
    _   Appliquer un bonus en pourcentage, en fonction du numéro de la vague en cours