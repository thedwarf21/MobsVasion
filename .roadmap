Si je devait le découper en tickets, ça ressemblerait probablement à quelque chose comme ça (je vous mets juste les titres des tickets).
Je le tiendrai à jour en "cochant" les tâches accomplies au fur et à mesure.
Je m'efforcerai de faire un commit par tâche (j'en aurais bien fait un par sous-tâche, mais comme je suis tout seul sur ce projet...).
À moins que je n'ai pas pensé à tout (ce qui serait tout à fait normal), je devrais pouvoir le dépiler dans cet ordre.

Je compléterai au fur et à mesure, en mettant en place des sous-tâches, voire en déclenchant de nouvelles tâches, lorsque cela s'avérera nécessaire. 

Légende :
*   Thématique
_   Tâche/sous-tâche à accomplir
X   Tâche en cours
x   Sous-tâche en cours
V   Tâche terminée
>   Sous-tâche terminée


*   Pause et menus
    V   Mise en place de pause/unpause et de la commande
        >   Modification du GenericGamepadAdapter
        >   Enregistrement de la commande et du listener associé, dans le GameInitializer
    V   Affichage de la pause/reprise
        >   Pause => affiche la popup de préférences utilisateur (voir plus bas), qui pourra également être ouverte depuis le magasin
        >   Unpause => fermeture et destruction de toutes les popups ouvertes au moment de l'action
    V   Gérer la manette dans les menus
        >   Ajouter les propriétés d'états nécessaires dans scope.controls (GameInitializer.initial_scope)
        >   Enregistrer les actions de commandes de menus, mettant à jour scope.controls, dans GamepadControls.prepareControls
        >   Gérer les commandes pour trigger les actions, dans GamepadControls.applyMenuControls
        >   Monter une classe intermédiaire, utilisée par GamepadControls.applyMenuControls, pour s'interfacer avec le menu actuellement ouvert
        >   Implémentation des méthodes abstraites de AbstractPopup dans ShopPopup et ParamtersPopup
*   Personnage
    V   Créer et afficher le personnage
        >   Style CSS du personnage
        >   Implémentation d'un personnage à travers une classe héritant de MobileGameElement
        >   Instancier la classe gérant le personnage, et l'injecter dans la fenêtre (MainController)
    V   Déplacer le personnage dans la fenêtre avec les commandes (manette uniquement, pour commencer), sans qu'il puisse en sorir
        >   Création de la classe MV_Character
        >   Création du rendu provisoire
        >   Fin de la refacto commencée plus tôt (évidemment, tout a pété, au moment de tout brancher ensemble :D)
    V   Gérer le tir principal
        >   Création de la classe MV_Shot
        >   Création du rendu provisoire
        >   Gérer la tempo entre deux tirs
    V   Composant pour afficher et gérer les barres de niveau (vie, xp, rechargements, etc)
        >   Style CSS d'une barre de niveau
        >   Implémentation
    V   Gérer le chargeur du tir principal (nombre de coups + rechargement)
        >   Regrouper les constantes concernant les problématiques d'intervalles entre deux répétitions d'une même action \
        >   Faire de même pour les compteurs enregistrés dans scope.game                                                   |=> je le fais en passant pour me simplifier la vie quand j'isolerai cette problématique
        >   Utiliser une boucle automatisée pour la décrémentation des compteurs                                          /
        >   Ajouter un compteur et une constante, pour le temps de rechargement de l'arme
        >   Ajouter un compteur et une constante, pour le nombre de balles actuellement dans le chargeur
        >   L'arme ne doit plus pouvoir tirer, si le chargeur est vide
        >   Paramétrer et implémenter une action de rechargement (utilisation d'un booléen dans scope.controls)
        >   L'arme doit se recharger toute seule, si le chargeur est vide et que le joueur n'est pas en train de viser avec son arme (joystick droit)
        >   Faire apparaître dans l'UI, le nombre de balles du chargeur sous la forme "<balles dans le chargeur> / <capacité chargeur>"
        >   Faire appraître une barre de progression pour le rechargement de l'arme
    V   Gérer le tir secondaire (une "ruade" dans la direction à laquelle le personnage fait face)
        >   Déplacement "dash"
        >   Gérer la tempo entre deux dash
        >   Faire apparaître une barre de progression du rechargement du dash
*   Monstres
    V   Faire apparaître un monstre
        >   Style CSS d'un monstre
        >   Classe JS gérant un monstre
        >   Créer une méthode dans le MainController pour faire pop un monstre à une position aléatoire au bord de l'écran
    V   Gérer le déplacement automatique des monstres
*   Mobs pop de début de vague
    V   Mettre en place un pop instant de tous les monstres de la vague (vérifier que le compte y est toujours, en testant plusieurs numéros de vague)
    V   Déléguer la dilution du pop dans le temps, à une fonction ou une classe
    V   Revoir la logique de génération du pop, afin que les PV des monstres augmentent avec le temps, quitte à augmenter leur nombre moins rapidement
*   Points de vie
    V   Afficher les barres de vie (personnage et monstre)
    V   Gérer les PV du personnage --> perte de PV quand un monstre touche le personnage
    V   Gérer les PV des monstres --> perte de PV d'un monstre quand un tir le touche
*   Préférences utilisateur
    V   Bouton ouvrant la fenêtre de configuration de la manette, si une manette a été reconnue
    V   Possibilité de désactiver la musique et/ou les effets sonores
    _   Volumes séparés, pour la musique et les effets sonores
*   Gérer l'argent
    V   Afficher l'argent détenu par le joueur, dans l'UI
    V   Ajout de l'argent aux ressources du joueur, lorsqu'un monstre rend l'âme
    V   Prélèvement automatique d'argent pour soigner le joueur, autant que l'argent en sa possession le permet, en cas de défaite (1$ = 5PV)
*   Gérer l'XP
    V   Afficher la barre d'XP et le niveau actuel du joueur dans l'UI
    V   Lorsque le joueur gagne un niveau, il gagne également un nombre fixe de points de compétence utilisables dans l'onglet "entraînement" du magasin
    V   L'XP nécessaire par niveau, sera calculée, comme les prix des améliorations, sur une suite basée sur celle de Fibonacci : Un = U(n-1) + U(n-2)
*   Conditions de fin de vague
    V   Défaite (PV joueur <= 0)
    V   Victoire (Tous les monstres de la vague ont pop, et il n'y en a plus un seul en jeu)
*   Feedback visuel
    V   Animation de pop pour les monstres
    V   Munitions en rouge quand à 0
    V   Effet visuel de santé faible (calque alpha rouge)
    V   Effet visuel quand un monstre est "au contact" du joueur, lui occasionnant des dégats.
    V   Affichage du nombre de points de vie sous la forme "{PV restants} / {max}"
*   Feedback auditif
    V   portail de pop
    V   percussion chambre vide
    V   passage en santé faible
    V   tir
    V   esquive
    V   level up
    V   mort d'un monstre 
    V   mort du joueur
    V   Ouverture / fermeture popup
    V   navigation menu
    V   validation item menu
*   Rapport de fin de vague
    V   Créer le template HTML et la feuille de style CSS de la popup
    V   Ouverture automatique du rapport de fin de vague
    V   Contenu dynamique du rapport
    V   Mécanisme de mise en pause automatique
*   Magasin
    V   Programmer l'ouverture du magasin après fermeture par le joueur du rapport de fin de vague
    V   Alimenter la propriété de paramétrage, dans le scope du MainController (liste d'objets JSON "shop" dans le GameInitializer)
    V   Créer le template HTML et la feuille de style CSS de la popup magasin
    V   Mettre en place les mécanismes automatisés de calculs et mise à jour de L'UI (suite à un achat: -ressources joueur, recalcul et maj affichage item acheté -> next lvl)
    V   Faire apparaître l'argent et les points de compétence dans l'UI
    V   Travailler le visuel du shop-header pour que ce soit intuitif (qu'on voie bien que ce sont deux onglets)
    V   Faire apparaître le numéro de la vague dans le bouton de fermeture de la popup
    V   Prise en compte de l'état des items magasin, dans les mécaniques du jeu
    V   Améliorer l'affichage des effets d'une amélioration
    V   Revoir la mise en page, pour être plus Mobile-friendly : 
        >   à gauche, les items affichés en moins grand, avec juste les noms (div scrollable, parce que je vais en rajouter)
        >   à droite, le détail de l'item survolé (ou focused, avec la manette)
    _   Au survol d'un soin, afficher la "plus-value" dans la barre de vie (accessibilité pour les dyscalculiques et les allergiques au calcul mental)
        _   gérer une progress-bar additionnelle dans la barre de vie
        _   mouseenter / mouseleave => déclencher l'apparition/disparition de la progress-bar additionnelle
        _   gérer cette problématique pour la navigation manette dans le menu
    _   Nouveaux items dans le magasin
        _   ajouter l'item "Détecteur de métaux" => augmentation des gains en argent
        _   ajouter l'item "Chargeur haute capacité" => augmentation des munitions dans le chargeur
        _   ajouter l'item "Tenue matelassée" => ajout d'une armure, absorbant les dégâts, mais ralentissant légèrement les déplacement (bah oui, c'est moins pratique pour bouger)
            _   gérer la nouvelle jauge, et les données qui vont avec
            _   ne pas oublier de gérer l'effet de ralentissement tant que l'armure est là
*   Sauvegarde automatique
    V   Sauvegarder automatiquement la partie, à chaque chaque fin de vague, à chaque démarrage de vague (pour que les achats soient enregistrés)
    V   Chargement automatique de la sauvegarde au démarrage du jeu
    V   Au démarrage du jeu, proposer au joueur de charger la sauvegarde OU de commencer une nouvelle partie (ce qui écrasera son ancienne sauvegarde)
*   Commandes
    V   Clavier + Souris
    _   Tactile
*   UI / UX
    V   Viseuls du jeu
    V   Style général des popup (boutons, mise en page commune)
    V   Ajouter la musique

*   Fignolage
X   Tester, au fil de l'eau
_   Mettre à jour la doc, à chaque étape majeure
V   Adapter l'objet AudioManager pour le pooling => balises <audio> créées à l'initialisation, puis utilisées
 

------------ A AJOUTER ENSUITE ------------
Choix dans le lobby, entre plusieurs armes pour le tir principal   \
Choix dans le lobby, entre plusieurs armes pour le tir secondaire   |=> facilitation à la création de nouveau contenu
Définir de nouveaux types de monstres                              /
